name: Build/publish a Docker image and deploy model in Kubernetes cluster by using Kserve
on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: emeralds-horizon/model-example ############### emeralds-horizon/emeralds-token
  NAMESPACE: models ################ emeralds-token
  MODEL_NAME: model-example

jobs:
  build-and-push-image:
    name: Build & push docker image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy-model-in-kubernetes-cluster:
    name: Deploy Model in Kubernetes cluster
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Kubectl
        uses: azure/k8s-set-context@v1
        with:
            ############################### Set this secret in GitHub
            kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy model secrets
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-type: 'generic'
          secret-name: model-secrets
          ############################################# Define Secrets here and set them in GitHub
          arguments: --from-literal=MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }} --from-literal=MINIO_SECRET_ACCESS_KEY=${{ secrets.MINIO_SECRET_ACCESS_KEY }} --from-literal=MINIO_API_URL=${{ secrets.MINIO_API_URL }} --from-literal=MINIO_BUCKET=${{ secrets.MINIO_BUCKET }} --from-literal=MODEL_PATH=${{ secrets.MODEL_PATH }}

      - name: Deploy model to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          ######################################### Define manifests to deploy except ingressroute
          manifests: |
            kubernetes/inferenceservice.yaml

      - name: Deploy Ingressroute to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: istio-system
          manifests: |
            kubernetes/ingressroute.yaml

      - name: Check if model virtualservice resource exists
        run: |
          RESOURCE_FOUND="false"
          MAX_RETRIES=60
          RETRY_INTERVAL=5 # seconds

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Checking for virtualservice resource (Attempt $i/$MAX_RETRIES)"
            EXISTS=$(kubectl get virtualservice -n ${{ env.NAMESPACE }} --no-headers=true | grep "^${{ env.MODEL_NAME }}" || true)
            if [ -n "$EXISTS" ]; then
              echo "Virtualservice Resource matching '${{ env.MODEL_NAME }}*' found."
              echo "Checking if ${{ env.MODEL_NAME }} virtualservice has been created..."
              sleep 30
              EXISTS_VS=$(kubectl get virtualservice ${{ env.MODEL_NAME }} -n ${{ env.NAMESPACE }} --ignore-not-found)
              if [ -n "$EXISTS_VS" ]; then
                echo "Virtualservice ${{ env.MODEL_NAME }} resource already exists, skipping deployment."
                echo "SKIP_VIRTUALSERVICE_DEPLOY=true" >> $GITHUB_ENV
              else
                echo "Virtualservice ${{ env.MODEL_NAME }} resource does not exist, proceeding with deployment."
                echo "SKIP_VIRTUALSERVICE_DEPLOY=false" >> $GITHUB_ENV
              fi
              RESOURCE_FOUND="true"
              break
            else
              echo "Virtualservice resource not found, waiting for $RETRY_INTERVAL seconds."
              sleep $RETRY_INTERVAL
            fi
          done

          if [ "$RESOURCE_FOUND" = "false" ]; then
            echo "Resource virtualservice not found after waiting. Exiting with error."
            exit 1
          fi

      - name: Deploy model virtualservice to the Kubernetes cluster
        if: env.SKIP_VIRTUALSERVICE_DEPLOY == 'false'
        uses: azure/k8s-deploy@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          manifests: |
            kubernetes/virtualservice.yaml
